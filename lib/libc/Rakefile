require_relative 'cross_builder'
require 'rake/clean'

MINIX_HOME = "#{ENV['HOME']}/Projects/minix"
MINIX_INCLUDES = File.join(MINIX_HOME,'include')

BUILD_DIR = File.absolute_path 'build'
OBJ_DIR = File.join(BUILD_DIR,'obj')
LIBC_OBJ_DIR = File.join(OBJ_DIR, 'libc')
MACHINE_DIR = File.join(MINIX_HOME, 'include', 'machine')

directory LIBC_OBJ_DIR

task MACHINE_DIR do |dir|
   #FileUtils.symlink( File.join(MINIX_INCLUDES,'arch','i386'), dir.name )
end


C_LIB = Rake::CrossBuilder.new do |builder|
  builder.task_namespace = 'cross'
  builder.target = "#{BUILD_DIR}/libc.a"
  builder.objects_path  = LIBC_OBJ_DIR
  builder.target_type = :static_library
  builder.source_search_paths = ["stdio/*.c", "ansi/*.c", "other/*.c", "ip/strcasecmp.c"]
  builder.include_paths = [ File.join(MINIX_HOME,'include')]
  builder.compilation_options << [ '-D__minix', '-D_MINIX', '-D_EM_WSIZE=4','-fomit-frame-pointer','-Os','-DNOFLOAT']
  builder.target_prerequisites = [LIBC_OBJ_DIR, MACHINE_DIR ]
end


CLEAN << [ BUILD_DIR, OBJ_DIR, LIBC_OBJ_DIR ]

def find_source_file_for(object_file)
  object_file.gsub( File.join(OBJ_DIR,''), '' ).ext('c')
end

=begin
STDIO_SRC = FileList['stdio/*.c']
STDIO_OBJ = STDIO_SRC.map { |source_file| File.join(OBJ_DIR, source_file ).ext('o') }

ANSI_SRC = FileList['ansi/*.c']
ANSI_OBJ = ANSI_SRC.map { |source_file| File.join(OBJ_DIR, source_file ).ext('o') }

CLEAN << STDIO_OBJ

STDIO_OBJ.each do |object_file|
  file object_file => [ find_source_file_for( object_file ), BUILD_DIR, OBJ_DIR, STDIO_OBJ_DIR, ANSI_OBJ_DIR ]  do |task|
    puts task.name
    FileUtils.touch( task.name )
  end
end
task :objs => STDIO_OBJ + ANSI_OBJ
=end

task :builder => [C_LIB.target]
task :clean => 'cross:clean'
